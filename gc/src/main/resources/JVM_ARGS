堆大小设置
    -Xmx1024m                           jvm最大内存
    -Xms1024m                           初始化内存
    -Xss128k                            设置线程堆栈大小  jdk5初始值1m
    -Xmn1024m                           设置年轻代大小为1024m。等效于同时配置下面两个。
        -XX:NewSize=1024m               设置年轻代初始值为1024M。
        -XX:MaxNewSize=1024m            设置年轻代最大值为1024M。
    -XX:PermSize=256m                   设置持久代初始值为256M。（jdk8后作废）
    -XX:MaxPermSize=256m                设置持久代最大值为256M。（jdk8后作废）

垃圾回收期设置
    串行收集器
    -XX:+UseSerialGC：设置串行收集器。
    　　并行收集器（吞吐量优先）
    -XX:+UseParallelGC：设置年轻代为并行收集器。（此时年老代仍然为串行）
    -XX:+UseParallelOldGC：配置年老代为并行收集。
    -XX:ParallelGCThreads=20：配置并行收集器的线程数。
    -XX:MaxGCPauseMillis=100：设置每次年轻代垃圾回收的最长时间（单位毫秒）。如果无法满足此时间，JVM会自动调整年轻代大小，以满足此时间。
    -XX:+UseAdaptiveSizePolicy：设置此选项后，并行收集器会自动调整年轻代Eden区大小和Survivor区大小的比例，以达成目标系统规定的最低响应时间或者收集频率等指标。此参数建议在使用并行收集器时，一直打开。
    　　并发收集器（响应时间优先）
    -XX:+UseConcMarkSweepGC：即CMS收集，设置年老代为并发收集。
    -XX:+UseParNewGC：设置年轻代为并发收集。JDK5.0以上JVM会自行设置，无需再设。
    -XX:CMSFullGCsBeforeCompaction=0：每次Full GC后立刻开始压缩和整理内存。
    -XX:+UseCMSCompactAtFullCollection：打开内存空间的压缩和整理，在Full GC后执行。
    -XX:+CMSIncrementalMode：设置为增量收集模式。一般适用于单CPU情况。
    -XX:CMSInitiatingOccupancyFraction=70：表示年老代内存空间使用到70%时就开始执行CMS收集，以确保年老代有足够的空间接纳来自年轻代的对象，避免Full GC的发生。
    　　其它垃圾回收参数
    -XX:+ScavengeBeforeFullGC：年轻代GC优于Full GC执行。
    -XX:-DisableExplicitGC：不响应 System.gc() 代码。
    -XX:+UseThreadPriorities：启用本地线程优先级API。即使 java.lang.Thread.setPriority() 生效，不启用则无效。
    -XX:SoftRefLRUPolicyMSPerMB=0：软引用对象在最后一次被访问后能存活0毫秒（JVM默认为1000毫秒）。
    -XX:TargetSurvivorRatio=90：允许90%的Survivor区被占用（JVM默认为50%）。提高对于Survivor区的使用率。


Minor GC（新生代GC）
FULL GC（Major GC或老年代GC）


新生代收集器：
    Serial              单线程         复制算法
    ParNew              并行           Serial收集器的多线程版本
    Parallel Scavenge   并行
老年代收集器：
    Serial Old          单线程
    Parallel Old        并行
    CMS                 并发
整堆收集器：G1；

